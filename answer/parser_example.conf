# Please note: this is an EXAMPLE parser for lab only, this parser will not work with production Sonic Firewall logs

filter {
# Step 1:  Extract the data from the formatted raw log
    kv {
        source => "message"
        value_split => "="
        trim_value => '\"'      # removes extraneous quotes
    }

# Step 2:  Format the fields, assign to UDM
    
    # Extract the date (hint: the date/time format is "yyyy-MM-dd HH:mm:ss")
    date {
        match => ["time", "yyyy-MM-dd HH:mm:ss"]
    }

    # Format and assign the rest of the fields -> UDM principal, target, intermediary, metadata, etc
    mutate {
        convert => {
            "dst_port" => "integer"
            "src_port" => "integer"
        }
        on_error => "_int_convert"
    }

    mutate {
        rename => {
            "src_port" => "event.idm.read_only_udm.principal.port"
            "dst_port" => "event.idm.read_only_udm.target.port"
        }
        on_error => "_mutate"
    }
    
    mutate {
        merge => {
            "event.idm.read_only_udm.principal.ip" => "src_ip"
            "event.idm.read_only_udm.target.ip" => "dst_ip"
        }
        on_error => "_udm_ips"
    }

    ### Intermediary
    mutate {
        merge => {
            "intermediary.ip" => "fw_ip"
        }
        on_error => "_int_ip"
    }

    mutate {
        merge => {
            "event.idm.read_only_udm.intermediary" => "intermediary"
        }
        on_error => "_udm_int"
    }

    ### Metadata
    mutate {
        replace => {
            #"event.idm.read_only_udm.metadata.event_type" => "GENERIC_EVENT"
            "event.idm.read_only_udm.metadata.event_type" => "NETWORK_CONNECTION"
            "event.idm.read_only_udm.metadata.vendor_name" => "Sonic"
            "event.idm.read_only_udm.metadata.product_name" => "Sonic Firewall"
        }
    }

statedump{}

# Step 3:  Output the UDM event
    mutate {
        merge => {
            "@output" => "event"
        }
    }
}
